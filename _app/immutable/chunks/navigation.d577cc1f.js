import{j as f}from"./singletons.3bbbe082.js";const r={keyLength:256,tagLength:128,saltLength:16,ivLength:12,iterations:25e4};class y extends Error{constructor(t){super(t),this.name=y.name}}function d(e){const t=new TextEncoder;return window.crypto.subtle.importKey("raw",t.encode(e),"PBKDF2",!1,["deriveKey"])}function h(e,t,n,a){return console.assert(t>=25e4),window.crypto.subtle.deriveKey({name:"PBKDF2",salt:n,iterations:t,hash:"SHA-512"},e,{name:"AES-GCM",length:r.keyLength},!1,a)}async function L(e,t){try{const n=window.crypto.getRandomValues(new Uint8Array(r.saltLength)),a=window.crypto.getRandomValues(new Uint8Array(r.ivLength)),o=await d(t),s=await h(o,r.iterations,n,["encrypt"]),i=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:a,tagLength:r.tagLength},s,e),l=new Uint8Array(i),c=new Uint8Array(n.byteLength+a.byteLength+l.byteLength);return c.set(n,0),c.set(a,n.byteLength),c.set(l,n.byteLength+a.byteLength),c}catch{throw new y("Encryption failed!")}}async function b(e,t){try{const n=e.slice(0,r.saltLength),a=e.slice(r.saltLength,r.saltLength+r.ivLength),o=e.slice(r.saltLength+r.ivLength),s=await d(t),i=await h(s,r.iterations,n,["decrypt"]),l=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:a},i,o);return new Uint8Array(l)}catch{throw new y("Encryption failed!")}}function g(e){const t="0123456789abcdef";let n="",a=0;for(let o=0;o<e.length;o++)a=e[o]>>4,n+=t[a],a=e[o]&15,n+=t[a];return n}const u="9HWX2BjoTYs43H7umMRT4uMd9NjgedziSqy8fPVnhL5JFa3DQtorAs8LgaW9WNp5";async function p(e){const t=await window.crypto.subtle.digest("SHA-512",e);return new Uint8Array(t)}async function A(e,t,n=2592e6,a=u){console.assert(t.length>0);const o={go:e,expire:Date.now()+n},s=JSON.stringify(o);console.dev(s);const i=new TextEncoder,l=await p(i.encode(t)),c=await L(i.encode(s),a),w=new Blob([c],{type:"octet/stream"});return[g(l),w]}async function k(e,t=u){const n=new TextEncoder,a=await p(n.encode(e)),o=g(a);let s=null;try{s=await fetch(`links/${o}`)}catch{throw new Error("Cannot fetch file!")}if(!s.ok)throw new Error("File does not exist!");const i=await s.blob(),l=new Uint8Array(await i.arrayBuffer());try{const c=await b(l,t);return JSON.parse(new TextDecoder().decode(c))}catch{return null}}const v=f("goto");export{A as c,v as g,k as r};
